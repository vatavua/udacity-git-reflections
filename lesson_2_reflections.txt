What happens when you initialize a repository? Why do you need to do it?
When a new repository is initialized, new .git directory is created. In other words necessary config/stats/ingo/description files are created for managing the new repository. We need to do it because otherwise git (as an application) would not be able to identify and manage our new project.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area may be regarded as a temporary directory (cache) where new files are added. It allows us to incrementally add the new files and the to commit the changes.

How can you use the staging area to make sure you have one commit per logical change?
The staging area can be used to collect only those changes that describe the 'logical change', even there are more modified files. After that a new commit can be created. Tha opperation can be repeated if there is more tan one logical commit in the working directory.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
The branches are helpful especially when we have to do some alternative experimental versions or when we want to implement different versions of the same project. The new branches can be used in parallel with the master branch and at some point in time they can be merged.

How do the diagrams help you visualize the branch structure?
Through diagrams we have a graph with the entire commits and branch structure. Each commit represents a node in the graph. By having an overview of our history of commits as a node-based network we can operate more easely on the existing changes.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The merging process will try to merge the changes made in the two braches in a single branch. The destination branch will be the branch we are checked up. So before the merging process we should verify that we are on a correct branch. The merging will take into account the 'head' commits in each branch and the parrent commit where the branches where started to split. The new modfication (additions and deletions of the new content) will be reflected in the merged file. The lines that were modified in both branches will generate a commit situation. In this case the user should manually choose or modify the conflict lines in the files and tray again to commit these changes. The generated diagrams helps the user to visualize better the commit distribution over the entire network and branches.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Pros:
- Some repetitive tasks are executed by Git. For example: adding new information or removing some old information (when there is no a conflict).
- Actually, Git seems to be a trade of between doing merges manually (time consuming) and doing merges completely automatically (low reliability).
Cons:
- There is no waranty that our merge result will lead to the expected results: for example some modification may be added accidentally by a contributor, in this case, the automatic merge of commits will provide uncorrect or wrong results.