When would you want to use a remote repository rather than keeping all your work local?

- When sharing the personal contribution with other friends or when I would like to make the project public.
- For a teacher, sometimes it's a good idea to initiate a public repository for students to collect all assessments, homework projects or to share new lessons and tutorials with students.
- For a startup project when there are more collaborators.
- When I want to have access to my repository from anywhere.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

- By using the manual pull of new changes we can obtain a higher flexibility and consistence. Sometimes, by having an automate sync with the repository might lead to unwanted conflicts with the existing commits. More than that, as I guess, the pull process tries to merge the remote content with the existing local commit (HEAD). What happens if we have made some changes but have not committed yet?  In this case the system would force us to commit our partial changes otherwise the pull process would fail. Hence, the best scenario would be to do pull the remote content manually.
- Similarly to the commit process we might want to pull new changes only before starting or after finishing a logical task. It would be quite annoying to have a sudden change in the local project in the middle of doing something. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?

The difference between the fork and clone operation is that the fork replicate a repository directly on the GitHub while the clone is applied to create a copy of the same repository on the local computer. A copy can be mate either form a public repository or from a local computer repository. The fork is a kind of clone, but used as a feature of the GitHub platform, while “clone” is an existing command in the Git application. A branch is seen as a chain of several commits. Branch operate on commits and are a part of a repository while forks and clones operate on repositories.
One can use forks instead of clones to copy other repositories directly on the GitHub. Clones are used for the same purpose but are executed locally on a computer. Branches are used used to merge, commit, push or pull the changed content.

What is the benefit of having a copy of the last known state of the remote stored locally?

One of the benefits having a copy of the remote state stored locally is the ability to work offline without needing the connection to the remote repository. Another benefit is that we can return to the remote commits several times, accessing them, checking the differences without needing to connect to the repository each time (avoiding the server and communication overhead). If something goes wrong we can always recover another copy of changes from the remote repository. And more, there are two way to merge the two branches master and origin/master: 1. Merging the origin/master into master and 2. Merging the local master into the origin/master.  I think it is more safe to perform both these operations locally and only after finishing them to push the new commit . 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

There are several alternatives. Some of these alternatives were mentioned in the Lesson 1, i.e. Google Docs, Dropbox, SVN etc. If we talk about editing some documents, then I would prefer to work with Gogle Docs. It allows to work concurrently on the same document and to see what others are working on. If we are talking about media files or pictures, then I would prefer to work with Dropbox. It is an easy way to centralize and synchronize in real-time different files from different computers or mobile devices. However, if we are talking about version control then I would prefer GIT. The only drawback with GIT is that sometimes it is quite hard to visualize the whole scenario or what you are going to do. If you don’t use frequently GIT, then all these version control principles or specific commands are forgotten very easy. Perhaps a more intuitive application based on GIT is the Tortoise GIT which provides a visual and intuitive interface to perform all operations described in this course.



